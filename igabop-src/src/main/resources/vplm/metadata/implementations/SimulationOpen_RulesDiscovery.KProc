#Prog SimulationOpen_RulesDiscovery (iPLMIDSet :  #In PLMIDSet,oPLMIDSet :  #Out PLMIDSet) : VoidType
{
let IdsCategoriesAndSo(PLMIDSet)

let IdsExtDoc(PLMIDSet)

let IdsSimuRep(PLMIDSet)

let IdsPublishResult(PLMIDSet)

let IdsSetModel (PLMIDSet) 





let RouteSetCategoriesAndSo (PLMRouteSet)

let RouteSetModel (PLMRouteSet)

let RouteSetExtDoc (PLMRouteSet)

let RouteSimuRep (PLMRouteSet)

let RouteSetProdAndChildren (PLMRouteSet)

let RoutePublishResult (PLMRouteSet)

 







/* getting categories + so */

RouteSetCategoriesAndSo = ExecutePLMFunction("SIMObjSimulationGeneric", "sim_retrieveCategories", iPLMIDSet)

IdsCategoriesAndSo = Ids( RouteSetCategoriesAndSo)



/* getting External documents from SO or\and from Categories */

 RouteSetExtDoc = ExecutePLMFunction("PLMDocConnection", "PLMDocConnection_retrieveAllDocuments", IdsCategoriesAndSo)

IdsExtDoc = Ids(RouteSetExtDoc)





/* getting system connection + product */

RouteSetModel = ExecutePLMFunction("SIMObjSimulationGeneric", "sim_addSimulatedModel", Restrict(IdsCategoriesAndSo, "SIMObjSimulationCategoryAndProdCnx/SIMObjSimulationCategoryReference")) 

IdsSetModel =   Ids(RouteSetModel)






/* getting simu rep under category Scenario*/

RouteSimuRep = ExecutePLMFunction("SIMObjSimulationGeneric", "sim_retrieveSimuRep", Restrict(IdsCategoriesAndSo, "SIMObjSimulationCategoryAndProdCnx/SIMObjSimulationCategoryReference"))

IdsSimuRep = Ids(RouteSimuRep)



 


/* getting publish result connection */

RoutePublishResult  = ExecutePLMFunction("SIMObjSimulationGeneric", "sim_addPublishResultCnxForOpen", Restrict(IdsCategoriesAndSo, "SIMObjSimulationCategoryAndProdCnx/SIMObjSimulationCategoryReference"))

IdsPublishResult = Ids(RoutePublishResult)

 


oPLMIDSet = IdsCategoriesAndSo + IdsExtDoc + IdsSetModel + IdsSimuRep  + IdsPublishResult 
}

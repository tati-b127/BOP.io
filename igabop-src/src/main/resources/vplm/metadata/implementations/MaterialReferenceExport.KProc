#Prog MaterialReferenceExport (iPLMIDSet :  #In PLMIDSet,oPLMIDSet :  #Out PLMIDSet) : VoidType
  {
let PLMIDSet1(PLMIDSet)
let PLMIDSet2(PLMIDSet)
let PLMIDSet3(PLMIDSet)
let PLMIDSet4(PLMIDSet)
let PLMIDSet5(PLMIDSet)
let PLMIDSet6(PLMIDSet)
let PLMIDSet7(PLMIDSet)
let PLMRouteSet1 (PLMRouteSet)
let PLMRouteSet2 (PLMRouteSet)
let PLMRouteSet3 (PLMRouteSet)
let PLMRouteSet4 (PLMRouteSet)
let PLMRouteSet5 (PLMRouteSet)


/* getting all materials references from material vector */
PLMRouteSet5 = ExecutePLMFunction("CATMaterialRef", "mat_retrieveMatRefFromVector", iPLMIDSet)
PLMIDSet7 = Ids(PLMRouteSet5)
PLMIDSet5 = Restrict(Ids(PLMRouteSet5), "CATMaterialRef/CATMatReference")
PLMIDSet6 = iPLMIDSet + PLMIDSet5

/* getting all domains */
PLMRouteSet1 = ExecutePLMFunction("CATMaterialRef", "mat_retrieveDomains", PLMIDSet6)
PLMIDSet1 = Ids(PLMRouteSet1)

/* getting all connections aggregated by the material*/
PLMRouteSet2 = ExecutePLMFunction("CATMaterialRef", "mat_retrieveCnx", PLMIDSet6)
PLMIDSet2 = Ids(PLMRouteSet2)

/* getting Documents pointed by rendering domain*/
PLMRouteSet3 = ExecutePLMFunction("CATMaterialRef", "rdg_retrieveTexture",Restrict(PLMIDSet1, "CATMaterialRef/MaterialDomain"))
PLMIDSet3 = Ids(PLMRouteSet3)

/* Completes with Documents Connections */
PLMRouteSet4 = ExecutePLMFunction("PLMDocConnection", "PLMDocConnection_retrieveAllDocuments", PLMIDSet6)
PLMIDSet4 = Ids(PLMRouteSet4)

oPLMIDSet = PLMIDSet1 +  PLMIDSet2 + PLMIDSet3 + PLMIDSet4 + iPLMIDSet + PLMIDSet7

}


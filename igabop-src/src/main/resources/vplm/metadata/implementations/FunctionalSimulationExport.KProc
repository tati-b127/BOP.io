#Prog FunctionalSimulationExport (iPLMIDSet :  #In PLMIDSet,oPLMIDSet :  #Out PLMIDSet) : VoidType
  {
let PLMIDSet1(PLMIDSet)
let PLMIDSet2(PLMIDSet)
let PLMIDSet3(PLMIDSet)
let PLMIDSet4(PLMIDSet)
let PLMIDSet5(PLMIDSet)
let PLMIDSetM(PLMIDSet)
let IdsPortParam (PLMIDSet)
let IdsRefInput (PLMIDSet)

let PLMRouteSet1 (PLMRouteSet)
let PLMRouteSet2 (PLMRouteSet)
let PLMRouteSet3 (PLMRouteSet)
let PLMRouteSet4 (PLMRouteSet)
let PLMRouteSet5 (PLMRouteSet)
let RoutePortParam(PLMRouteSet)

/* getting categories */
IdsRefInput = Restrict(iPLMIDSet, "SIMObjSimulation/SIMObjSimulationObject") + Restrict(iPLMIDSet, " SIMObjSimulationCategoryAndProdCnx/SIMObjSimulationCategoryReference")
PLMRouteSet1 = ExecutePLMFunction("SIMObjSimulationGeneric", "sim_retrieveCategories", IdsRefInput)
PLMIDSet1 = Ids(PLMRouteSet1)

/* getting Ports from SO  */
 RoutePortParam = ExecutePLMFunction("PLMParameter", "PAR_nav_paramports", PLMIDSet1)
IdsPortParam = Ids(RoutePortParam)

/* getting model reference */
PLMRouteSet2 = ExecutePLMFunction("SIMObjSimulationGeneric", "sim_addSimulatedModel", Restrict(PLMIDSet1, "SIMObjSimulationCategoryAndProdCnx/SIMObjSimulationCategoryReference"))
PLMIDSet2 =  Ids(PLMRouteSet2)

/* getting simu rep under category */
PLMRouteSet3 = ExecutePLMFunction("SIMObjSimulationGeneric", "sim_retrieveSimuRep", Restrict(PLMIDSet1, "SIMObjSimulationCategoryAndProdCnx/SIMObjSimulationCategoryReference"))
PLMIDSet3 = Ids(PLMRouteSet3)

/* getting external doc from simu rep */
PLMRouteSet4 = ExecutePLMFunction("SIMObjSimulationGeneric", "sim_retrieveExternalDocumentfromSimuRep", Restrict(PLMIDSet3, "SIMObjSimulationV5Generic/SIMObjSimulationV5RepReferenceGeneric"))
PLMIDSet4 = Ids(PLMRouteSet4)

/*  getting  publish  result  */ 
PLMRouteSet5  =  ExecutePLMFunction("SIMObjSimulationGeneric",  "sim_addPublishResultCnx",  Restrict(PLMIDSet1,  "SIMObjSimulationCategoryAndProdCnx/SIMObjSimulationCategoryReference"))
PLMIDSet5 = Ids(PLMRouteSet5)

/* call fucntional proc on model*/
PLMIDSetM = ExecutePLMProcedure("Functional_ExportReference_Design",Restrict(PLMIDSet2, "RFLPLMFunctional/RFLPLMFunctionalReference")) 


oPLMIDSet = PLMIDSet1 + PLMIDSet2 + PLMIDSet3 + PLMIDSet4 + PLMIDSet5 + PLMIDSetM + IdsPortParam
}



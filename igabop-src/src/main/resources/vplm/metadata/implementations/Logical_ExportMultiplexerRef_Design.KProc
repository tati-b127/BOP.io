#Prog Logical_ExportMultiplexerRef_Design (iPLMIDSet :  #In PLMIDSet,oPLMIDSet :  #Out PLMIDSet) : VoidType
{
  let InputPLMIDSetRestrictedToRefs(PLMIDSet)
  let SetOfPLMRoutesMuxObjects(PLMRouteSet)
  let SetOfMuxObjectsPLMIDs(PLMIDSet)
  let SetOfTypeRefsPLMIDsToExpand(PLMIDSet)
  let SetOfTypesPLMIDs(PLMIDSet)

  InputPLMIDSetRestrictedToRefs = Restrict(iPLMIDSet,"RFLVPMLogicalCommunication/RFLVPMLogicalCommunicationReference")
 
  /* Get ports, type instances under the logical communication reference (resp: LVT) */
  SetOfPLMRoutesMuxObjects = ExecutePLMFunction("RFLVPMLogical","RFLVPMLogical_Get1stLevelObjects",InputPLMIDSetRestrictedToRefs)
   
  /*Completes with complete expand of Type definitions (resp : LRG) */
  SetOfMuxObjectsPLMIDs = Ids(SetOfPLMRoutesMuxObjects)
  SetOfTypeRefsPLMIDsToExpand = Restrict(SetOfMuxObjectsPLMIDs,"RFLVPMSystemType/RFLVPMSystemTypeReference")
  SetOfTypesPLMIDs = ExecutePLMProcedure("Logical_ExportType_Design",SetOfTypeRefsPLMIDsToExpand)
  
  oPLMIDSet = iPLMIDSet + SetOfMuxObjectsPLMIDs + SetOfTypesPLMIDs
}
